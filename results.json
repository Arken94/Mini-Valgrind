[
  {
    "timestamp": "2016-09-16 00:00:00.651725", 
    "testcases": [
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "no_leak", 
        "description": "Test with program that has no memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "leak", 
        "description": "Test with program that has memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "bad_free", 
        "description": "Test with program that has bad frees."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "full", 
        "description": "Test with program that has a variety of issues."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==16388== Memcheck, a memory error detector\n==16388== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==16388== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==16388== Command: ././full_test\n==16388== \n==16388== Invalid write of size 8\n==16388==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==16388==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==16388== \n==16388== \n==16388== Process terminating with default action of signal 11 (SIGSEGV)\n==16388==  Access not within mapped region at address 0x0\n==16388==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==16388==  If you believe this happened as a result of a stack\n==16388==  overflow in your program's main thread (unlikely but\n==16388==  possible), you can try to increase the size of the\n==16388==  main thread stack using the --main-stacksize= flag.\n==16388==  The main thread stack size used in this run was 8388608.\n==16388== \n==16388== HEAP SUMMARY:\n==16388==     in use at exit: 0 bytes in 0 blocks\n==16388==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==16388== \n==16388== All heap blocks were freed -- no leaks are possible\n==16388== \n==16388== For counts of detected and suppressed errors, rerun with: -v\n==16388== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "memory", 
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well."
      }
    ], 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c", 
    "revision": "22355"
  }, 
  {
    "timestamp": "2016-09-17 00:00:00.660261", 
    "testcases": [
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has no memory leaks.", 
        "name": "no_leak", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has memory leaks.", 
        "name": "leak", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has bad frees.", 
        "name": "bad_free", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has a variety of issues.", 
        "name": "full", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well.", 
        "name": "memory", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==628== Memcheck, a memory error detector\n==628== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==628== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==628== Command: ././full_test\n==628== \n==628== Invalid write of size 8\n==628==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==628==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==628== \n==628== \n==628== Process terminating with default action of signal 11 (SIGSEGV)\n==628==  Access not within mapped region at address 0x0\n==628==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==628==  If you believe this happened as a result of a stack\n==628==  overflow in your program's main thread (unlikely but\n==628==  possible), you can try to increase the size of the\n==628==  main thread stack using the --main-stacksize= flag.\n==628==  The main thread stack size used in this run was 8388608.\n==628== \n==628== HEAP SUMMARY:\n==628==     in use at exit: 0 bytes in 0 blocks\n==628==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==628== \n==628== All heap blocks were freed -- no leaks are possible\n==628== \n==628== For counts of detected and suppressed errors, rerun with: -v\n==628== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n"
      }
    ], 
    "revision": "22842", 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c"
  }, 
  {
    "timestamp": "2016-09-18 00:00:00.646216", 
    "testcases": [
      {
        "description": "Test with program that has no memory leaks.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "no_leak", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has memory leaks.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "leak", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has bad frees.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "bad_free", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has a variety of issues.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "full", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==16705== Memcheck, a memory error detector\n==16705== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==16705== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==16705== Command: ././full_test\n==16705== \n==16705== Invalid write of size 8\n==16705==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==16705==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==16705== \n==16705== \n==16705== Process terminating with default action of signal 11 (SIGSEGV)\n==16705==  Access not within mapped region at address 0x0\n==16705==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==16705==  If you believe this happened as a result of a stack\n==16705==  overflow in your program's main thread (unlikely but\n==16705==  possible), you can try to increase the size of the\n==16705==  main thread stack using the --main-stacksize= flag.\n==16705==  The main thread stack size used in this run was 8388608.\n==16705== \n==16705== HEAP SUMMARY:\n==16705==     in use at exit: 0 bytes in 0 blocks\n==16705==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==16705== \n==16705== All heap blocks were freed -- no leaks are possible\n==16705== \n==16705== For counts of detected and suppressed errors, rerun with: -v\n==16705== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n", 
        "name": "memory", 
        "ptsPossible": 1.0
      }
    ], 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c", 
    "revision": "23710"
  }, 
  {
    "timestamp": "2016-09-19 00:00:00.656635", 
    "testcases": [
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "no_leak", 
        "description": "Test with program that has no memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "leak", 
        "description": "Test with program that has memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "bad_free", 
        "description": "Test with program that has bad frees."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "full", 
        "description": "Test with program that has a variety of issues."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==382== Memcheck, a memory error detector\n==382== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==382== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==382== Command: ././full_test\n==382== \n==382== Invalid write of size 8\n==382==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==382==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==382== \n==382== \n==382== Process terminating with default action of signal 11 (SIGSEGV)\n==382==  Access not within mapped region at address 0x0\n==382==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==382==  If you believe this happened as a result of a stack\n==382==  overflow in your program's main thread (unlikely but\n==382==  possible), you can try to increase the size of the\n==382==  main thread stack using the --main-stacksize= flag.\n==382==  The main thread stack size used in this run was 8388608.\n==382== \n==382== HEAP SUMMARY:\n==382==     in use at exit: 0 bytes in 0 blocks\n==382==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==382== \n==382== All heap blocks were freed -- no leaks are possible\n==382== \n==382== For counts of detected and suppressed errors, rerun with: -v\n==382== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n", 
        "ptsEarned": 0.0, 
        "ptsPossible": 1.0, 
        "name": "memory", 
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well."
      }
    ], 
    "revision": "25067", 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c"
  }, 
  {
    "timestamp": "2016-09-20 00:00:00.648912", 
    "testcases": [
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has no memory leaks.", 
        "name": "no_leak", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has memory leaks.", 
        "name": "leak", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has bad frees.", 
        "name": "bad_free", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has a variety of issues.", 
        "name": "full", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n"
      }, 
      {
        "ptsPossible": 1.0, 
        "ptsEarned": 0.0, 
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well.", 
        "name": "memory", 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==16619== Memcheck, a memory error detector\n==16619== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==16619== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==16619== Command: ././full_test\n==16619== \n==16619== Invalid write of size 8\n==16619==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==16619==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==16619== \n==16619== \n==16619== Process terminating with default action of signal 11 (SIGSEGV)\n==16619==  Access not within mapped region at address 0x0\n==16619==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==16619==  If you believe this happened as a result of a stack\n==16619==  overflow in your program's main thread (unlikely but\n==16619==  possible), you can try to increase the size of the\n==16619==  main thread stack using the --main-stacksize= flag.\n==16619==  The main thread stack size used in this run was 8388608.\n==16619== \n==16619== HEAP SUMMARY:\n==16619==     in use at exit: 0 bytes in 0 blocks\n==16619==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==16619== \n==16619== All heap blocks were freed -- no leaks are possible\n==16619== \n==16619== For counts of detected and suppressed errors, rerun with: -v\n==16619== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n"
      }
    ], 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c", 
    "revision": "26795"
  }, 
  {
    "timestamp": "2016-09-21 00:00:00.673242", 
    "testcases": [
      {
        "description": "Test with program that has no memory leaks.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "no_leak", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has memory leaks.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "leak", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has bad frees.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "bad_free", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has a variety of issues.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n", 
        "name": "full", 
        "ptsPossible": 1.0
      }, 
      {
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well.", 
        "ptsEarned": 0.0, 
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==12056== Memcheck, a memory error detector\n==12056== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==12056== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==12056== Command: ././full_test\n==12056== \n==12056== Invalid write of size 8\n==12056==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==12056==  Address 0x0 is not stack'd, malloc'd or (recently) free'd\n==12056== \n==12056== \n==12056== Process terminating with default action of signal 11 (SIGSEGV)\n==12056==  Access not within mapped region at address 0x0\n==12056==    at 0x4008DE: main (in .../amibrah2/mini_valgrind/full_test)\n==12056==  If you believe this happened as a result of a stack\n==12056==  overflow in your program's main thread (unlikely but\n==12056==  possible), you can try to increase the size of the\n==12056==  main thread stack using the --main-stacksize= flag.\n==12056==  The main thread stack size used in this run was 8388608.\n==12056== \n==12056== HEAP SUMMARY:\n==12056==     in use at exit: 0 bytes in 0 blocks\n==12056==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated\n==12056== \n==12056== All heap blocks were freed -- no leaks are possible\n==12056== \n==12056== For counts of detected and suppressed errors, rerun with: -v\n==12056== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)\n", 
        "name": "memory", 
        "ptsPossible": 1.0
      }
    ], 
    "revision": "27776", 
    "checksum": "82fc9ba4dcb7c4b2d87e691ec5dc075792bbdd98  mini_valgrind.c"
  }, 
  {
    "timestamp": "2016-09-22 00:00:00.665196", 
    "testcases": [
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "no_leak", 
        "description": "Test with program that has no memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "leak", 
        "description": "Test with program that has memory leaks."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "bad_free", 
        "description": "Test with program that has bad frees."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "full", 
        "description": "Test with program that has a variety of issues."
      }, 
      {
        "log": "Trying to compile your code...\nSuccessfully compiled your code..\n==28399== Memcheck, a memory error detector\n==28399== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.\n==28399== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info\n==28399== Command: ././full_test\n==28399== \n==28399== \n==28399== HEAP SUMMARY:\n==28399==     in use at exit: 0 bytes in 0 blocks\n==28399==   total heap usage: 3 allocs, 3 frees, 520 bytes allocated\n==28399== \n==28399== All heap blocks were freed -- no leaks are possible\n==28399== \n==28399== For counts of detected and suppressed errors, rerun with: -v\n==28399== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n", 
        "ptsPossible": 1.0, 
        "ptsEarned": 1.0, 
        "name": "memory", 
        "description": "Test with program that has a variety of issues (but under valgrind now).\nNote that you had to get the full_test correct to pass this one as well."
      }
    ], 
    "checksum": "257daf541a4074ecb7a4d35f826000dff346de94  mini_valgrind.c", 
    "revision": "29130"
  }
]